[DEFAULT]

#
# From murano
#

# Enable eventlet backdoor.  Acceptable values are 0, <port>, and
# <start>:<end>, where 0 results in listening on a random tcp port
# number; <port> results in listening on the specified port number
# (and not enabling backdoor if that port is in use); and
# <start>:<end> results in listening on the smallest unused port
# number within the specified range of port numbers.  The chosen port
# is displayed in the service's log file. (string value)
#backdoor_port = <None>

# Number of backlog requests to configure the socket with (integer
# value)
#backlog = 4096

# Address to bind the Murano API server to. (string value)
#bind_host = 0.0.0.0

# Port the bind the Murano API server to. (integer value)
#bind_port = 8082
url=http://localhost:8082/v1

# Print debugging output (set logging level to DEBUG instead of
# default WARNING level). (boolean value)
debug = true

# List of logger=LEVEL pairs. (list value)
#default_log_levels = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,oslo.messaging=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN

# Enables or disables inter-process locks. (boolean value)
#disable_process_locking = false

# Enables or disables fatal status of deprecations. (boolean value)
#fatal_deprecations = false

# (string value)
#file_server =

# The format for an instance that is passed with the log message.
# (string value)
#instance_format = "[instance: %(uuid)s] "

# The format for an instance UUID that is passed with the log message.
# (string value)
#instance_uuid_format = "[instance: %(uuid)s] "

# Directory to use for lock files. (string value)
#lock_path = <None>

# The name of a logging configuration file. This file is appended to
# any existing logging configuration files. For details about logging
# configuration files, see the Python logging module documentation.
# (string value)
# Deprecated group/name - [DEFAULT]/log_config
#log_config_append = logging.conf

# Format string for %%(asctime)s in log records. Default: %(default)s
# . (string value)
#log_date_format = %Y-%m-%d %H:%M:%S

# (Optional) The base directory used for relative --log-file paths.
# (string value)
# Deprecated group/name - [DEFAULT]/logdir
#log_dir = <None>

# (Optional) Name of log file to output to. If no default is set,
# logging will go to stdout. (string value)
# Deprecated group/name - [DEFAULT]/logfile
log_file = murano.log

# DEPRECATED. A logging.Formatter log message format string which may
# use any of the available logging.LogRecord attributes. This option
# is deprecated.  Please use logging_context_format_string and
# logging_default_format_string instead. (string value)
#log_format = <None>

# Format string to use for log messages with context. (string value)
#logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s

# Data to append to log format when level is DEBUG. (string value)
#logging_debug_format_suffix = %(funcName)s %(pathname)s:%(lineno)d

# Format string to use for log messages without context. (string
# value)
#logging_default_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s

# Prefix each line of exception output with this format. (string
# value)
#logging_exception_prefix = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s

# Metadata dir (string value)
#metadata_dir = ./meta

# (string value)
#murano_metadata_url =

# Default rule. Enforced when a requested rule is not found. (string
# value)
#policy_default_rule = default

# The JSON file that defines policies. (string value)
#policy_file = policy.json

# Enables or disables publication of error events. (boolean value)
#publish_errors = false

# Syslog facility to receive log lines. (string value)
#syslog_log_facility = LOG_USER

# Sets the value of TCP_KEEPIDLE in seconds for each server socket.
# Not supported on OS X. (integer value)
#tcp_keepidle = 600

# Log output to standard error. (boolean value)
#use_stderr = true

# Use syslog for logging. Existing syslog format is DEPRECATED during
# I, and will chang in J to honor RFC5424. (boolean value)
#use_syslog = false

# (Optional) Enables or disables syslog rfc5424 format for logging. If
# enabled, prefixes the MSG part of the syslog message with APP-NAME
# (RFC5424). The format without the APP-NAME is deprecated in I, and
# will be removed in J. (boolean value)
#use_syslog_rfc_format = false

# Print more verbose output (set logging level to INFO instead of
# default WARNING level). (boolean value)
#verbose = false

#
# From oslo.messaging
#

# Auto-delete queues in amqp. (boolean value)
#amqp_auto_delete = false

# Use durable queues in amqp. (boolean value)
# Deprecated group/name - [DEFAULT]/rabbit_durable_queues
#amqp_durable_queues = false

# The default exchange under which topics are scoped. May be
# overridden by an exchange name specified in the transport_url
# option. (string value)
#control_exchange = openstack

# If passed, use a fake RabbitMQ provider. (boolean value)
#fake_rabbit = false

# How long to wait before reconnecting in response to an AMQP consumer
# cancel notification. (floating point value)
#kombu_reconnect_delay = 1.0

# SSL certification authority file (valid only if SSL enabled).
# (string value)
#kombu_ssl_ca_certs =

# SSL cert file (valid only if SSL enabled). (string value)
#kombu_ssl_certfile =

# SSL key file (valid only if SSL enabled). (string value)
#kombu_ssl_keyfile =

# SSL version to use (valid only if SSL enabled). valid values are
# TLSv1, SSLv23 and SSLv3. SSLv2 may be available on some
# distributions. (string value)
#kombu_ssl_version =

# Heartbeat frequency. (integer value)
#matchmaker_heartbeat_freq = 300

# Heartbeat time-to-live. (integer value)
#matchmaker_heartbeat_ttl = 600

# Driver or drivers to handle sending notifications. (multi valued)
#notification_driver =

# AMQP topic used for OpenStack notifications. (list value)
# Deprecated group/name - [rpc_notifier2]/topics
#notification_topics = notifications

# Seconds between connection keepalive heartbeats. (integer value)
#qpid_heartbeat = 60

# Qpid broker hostname. (string value)
#qpid_hostname = localhost

# Qpid HA cluster host:port pairs. (list value)
#qpid_hosts = $qpid_hostname:$qpid_port

# Password for Qpid connection. (string value)
#qpid_password =

# Qpid broker port. (integer value)
#qpid_port = 5672

# Transport to use, either 'tcp' or 'ssl'. (string value)
#qpid_protocol = tcp

# The number of prefetched messages held by receiver. (integer value)
#qpid_receiver_capacity = 1

# Space separated list of SASL mechanisms to use for auth. (string
# value)
#qpid_sasl_mechanisms =

# Whether to disable the Nagle algorithm. (boolean value)
#qpid_tcp_nodelay = true

# The qpid topology version to use.  Version 1 is what was originally
# used by impl_qpid.  Version 2 includes some backwards-incompatible
# changes that allow broker federation to work.  Users should update
# to version 2 when they are able to take everything down, as it
# requires a clean break. (integer value)
#qpid_topology_version = 1

# Username for Qpid connection. (string value)
#qpid_username =

# Use HA queues in RabbitMQ (x-ha-policy: all). If you change this
# option, you must wipe the RabbitMQ database. (boolean value)
#rabbit_ha_queues = false

# The RabbitMQ broker address where a single node is used. (string
# value)
rabbit_host = rabbit
#rabbit_host =130.206.84.6
# RabbitMQ HA cluster host:port pairs. (list value)
#rabbit_hosts = $rabbit_host:$rabbit_port

# the RabbitMQ login method (string value)
#rabbit_login_method = AMQPLAIN

# Maximum number of RabbitMQ connection retries. Default is 0
# (infinite retry count). (integer value)
#rabbit_max_retries = 0

# The RabbitMQ password. (string value)
rabbit_password = guest
#rabbit_password = 8ce9d1cddb43f67f447f

# The RabbitMQ broker port where a single node is used. (integer
# value)
#rabbit_port = 5672

# How long to backoff for between retries when connecting to RabbitMQ.
# (integer value)
#rabbit_retry_backoff = 2

# How frequently to retry connecting with RabbitMQ. (integer value)
#rabbit_retry_interval = 1

# Connect over SSL for RabbitMQ. (boolean value)
#rabbit_use_ssl = false

# The RabbitMQ userid. (string value)
#rabbit_userid = guest

# The RabbitMQ virtual host. (string value)
#rabbit_virtual_host = /

# The messaging driver to use, defaults to rabbit. Other drivers
# include qpid and zmq. (string value)
#rpc_backend = rabbit

# Seconds to wait before a cast expires (TTL). Only supported by
# impl_zmq. (integer value)
#rpc_cast_timeout = 30

# Size of RPC connection pool. (integer value)
#rpc_conn_pool_size = 30

# Seconds to wait for a response from a call. (integer value)
#rpc_response_timeout = 60

# Size of RPC greenthread pool. (integer value)
#rpc_thread_pool_size = 64

# ZeroMQ bind address. Should be a wildcard (*), an ethernet
# interface, or IP. The "host" option should point or resolve to this
# address. (string value)
#rpc_zmq_bind_address = *

# Number of ZeroMQ contexts, defaults to 1. (integer value)
#rpc_zmq_contexts = 1

# Name of this node. Must be a valid hostname, FQDN, or IP address.
# Must match "host" option, if running Nova. (string value)
#rpc_zmq_host = localhost

# Directory for holding IPC sockets. (string value)
#rpc_zmq_ipc_dir = /var/run/openstack

# MatchMaker driver. (string value)
#rpc_zmq_matchmaker = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost

# ZeroMQ receiver listening port. (integer value)
#rpc_zmq_port = 9501

# Maximum number of ingress messages to locally buffer per topic.
# Default is unlimited. (integer value)
#rpc_zmq_topic_backlog = <None>

# A URL representing the messaging driver to use and its full
# configuration. If not set, we fall back to the rpc_backend option
# and driver specific configuration. (string value)
#transport_url = <None>


[database]

#
# From oslo.db
#

# The back end to use for the database. (string value)
# Deprecated group/name - [DEFAULT]/db_backend
#backend = sqlalchemy

# The SQLAlchemy connection string to use to connect to the database.
# (string value)
# Deprecated group/name - [DEFAULT]/sql_connection
# Deprecated group/name - [DATABASE]/sql_connection
# Deprecated group/name - [sql]/connection
connection = mysql://mysql:mysql@mysql/murano

# Verbosity of SQL debugging information: 0=None, 100=Everything.
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
#connection_debug = 0

# Add Python stack traces to SQL as comment strings. (boolean value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
#connection_trace = false

# If True, increases the interval between database connection retries
# up to db_max_retry_interval. (boolean value)
#db_inc_retry_interval = true

# Maximum database connection retries before error is raised. Set to
# -1 to specify an infinite retry count. (integer value)
#db_max_retries = 20

# If db_inc_retry_interval is set, the maximum seconds between
# database connection retries. (integer value)
#db_max_retry_interval = 10

# Seconds between database connection retries. (integer value)
#db_retry_interval = 1

# Timeout before idle SQL connections are reaped. (integer value)
# Deprecated group/name - [DEFAULT]/sql_idle_timeout
# Deprecated group/name - [DATABASE]/sql_idle_timeout
# Deprecated group/name - [sql]/idle_timeout
#idle_timeout = 3600

# If set, use this value for max_overflow with SQLAlchemy. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_max_overflow
# Deprecated group/name - [DATABASE]/sqlalchemy_max_overflow
#max_overflow = <None>

# Maximum number of SQL connections to keep open in a pool. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_max_pool_size
# Deprecated group/name - [DATABASE]/sql_max_pool_size
#max_pool_size = <None>

# Maximum number of database connection retries during startup. Set to
# -1 to specify an infinite retry count. (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_retries
# Deprecated group/name - [DATABASE]/sql_max_retries
#max_retries = 10

# Minimum number of SQL connections to keep open in a pool. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_min_pool_size
# Deprecated group/name - [DATABASE]/sql_min_pool_size
#min_pool_size = 1

# The SQL mode to be used for MySQL sessions. This option, including
# the default, overrides any server-set SQL mode. To use whatever SQL
# mode is set by the server configuration, set this to no value.
# Example: mysql_sql_mode= (string value)
#mysql_sql_mode = TRADITIONAL

# If set, use this value for pool_timeout with SQLAlchemy. (integer
# value)
# Deprecated group/name - [DATABASE]/sqlalchemy_pool_timeout
#pool_timeout = <None>

# Interval between retries of opening a SQL connection. (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_retry_interval
# Deprecated group/name - [DATABASE]/reconnect_interval
#retry_interval = 10

# The SQLAlchemy connection string to use to connect to the slave
# database. (string value)
#slave_connection = <None>

# The file name to use with SQLite. (string value)
# Deprecated group/name - [DEFAULT]/sqlite_db
#sqlite_db = oslo.sqlite

# If True, SQLite uses synchronous mode. (boolean value)
# Deprecated group/name - [DEFAULT]/sqlite_synchronous
#sqlite_synchronous = true

# Enable the experimental use of database reconnect on connection
# lost. (boolean value)
#use_db_reconnect = false


[engine]

#
# From murano
#

# Disallow the use of murano-agent (boolean value)
#disable_murano_agent = false


[heat]

#
# From murano
#

# (SSL) Tells Murano to use the specified certificate file to verify
# the peer running Heat API. (string value)
#ca_file = <None>

# (SSL) Tells Murano to use the specified client certificate file when
# communicating with Heat. (string value)
#cert_file = <None>

# Heat endpoint type. (string value)
#endpoint_type = publicURL

# This option explicitly allows Murano to perform "insecure" SSL
# connections and transfers with Heat API. (boolean value)
#insecure = false

# (SSL/SSH) Private key file name to communicate with Heat API.
# (string value)
#key_file = <None>


[keystone]

#
# From murano
#

# URL to access OpenStack Identity service. (string value)
auth_url = http://cloud.lab.fiware.org:4731/v2.0
# (SSL) Tells Murano to use the specified certificate file to verify
# the peer when communicating with Keystone. (string value)
#ca_file = <None>

# (SSL) Tells Murano to use the specified client certificate file when
# communicating with Keystone. (string value)
#cert_file = <None>

# This option explicitly allows Murano to perform "insecure" SSL
# connections and transfers with Keystone API running Kyestone API.
# (boolean value)
#insecure = false

# (SSL/SSH) Private key file name to communicate with Keystone API
# (string value)
#key_file = <None>


[keystone_authtoken]

#
# From keystonemiddleware.auth_token
#

# Keystone account password (string value)
admin_password = XXX 

# Keystone service account tenant name to validate user tokens (string
# value)
admin_tenant_name = admin

# This option is deprecated and may be removed in a future release.
# Single shared secret with the Keystone configuration used for
# bootstrapping a Keystone installation, or otherwise bypassing the
# normal authentication process. This option should not be used, use
# `admin_user` and `admin_password` instead. (string value)
#admin_token = <None>

# Keystone account username (string value)
admin_user = admin

# Prefix to prepend at the beginning of the path. Deprecated, use
# identity_uri. (string value)
#auth_admin_prefix =

# Host providing the admin Identity API endpoint. Deprecated, use
# identity_uri. (string value)
auth_host = cloud.lab.fiware.org


# Port of the admin Identity API endpoint. Deprecated, use
# identity_uri. (integer value)
auth_port = 4731

# Protocol of the admin Identity API endpoint (http or https).
# Deprecated, use identity_uri. (string value)
auth_protocol = http

# Complete public Identity API endpoint (string value)
auth_uri = http://cloud.lab.fiware.org:4731/v2.0


# API version of the admin Identity API endpoint (string value)
auth_version = v2.0

# Env key for the swift cache (string value)
#cache = <None>

# A PEM encoded Certificate Authority to use when verifying HTTPs
# connections. Defaults to system CAs. (string value)
#cafile = <None>

# Required if Keystone server requires client certificate (string
# value)
#certfile = <None>

# If true, the revocation list will be checked for cached tokens. This
# requires that PKI tokens are configured on the Keystone server.
# (boolean value)
#check_revocations_for_cached = false

# Do not handle authorization requests within the middleware, but
# delegate the authorization decision to downstream WSGI components
# (boolean value)
#delay_auth_decision = false

# Used to control the use and type of token binding. Can be set to:
# "disabled" to not check token binding. "permissive" (default) to
# validate binding information if the bind type is of a form known to
# the server and ignore it if not. "strict" like "permissive" but if
# the bind type is unknown the token will be rejected. "required" any
# form of token binding is needed to be allowed. Finally the name of a
# binding method that must be present in tokens. (string value)
#enforce_token_bind = permissive

# Hash algorithms to use for hashing PKI tokens. This may be a single
# algorithm or multiple. The algorithms are those supported by Python
# standard hashlib.new(). The hashes will be tried in the order given,
# so put the preferred one first for performance. The result of the
# first hash will be stored in the cache. This will typically be set
# to multiple values only while migrating from a less secure algorithm
# to a more secure one. Once all the old tokens are expired this
# option should be set to a single value for better performance. (list
# value)
#hash_algorithms = md5

# Request timeout value for communicating with Identity API server.
# (boolean value)
#http_connect_timeout = <None>

# How many times are we trying to reconnect when communicating with
# Identity API Server. (integer value)
#http_request_max_retries = 3

# Complete admin Identity API endpoint. This should specify the
# unversioned root endpoint e.g. https://localhost:35357/ (string
# value)
#identity_uri = <None>

# (optional) indicate whether to set the X-Service-Catalog header. If
# False, middleware will not ask for service catalog on token
# validation and will not set the X-Service-Catalog header. (boolean
# value)
#include_service_catalog = true

# Verify HTTPS connections. (boolean value)
#insecure = false

# Required if Keystone server requires client certificate (string
# value)
#keyfile = <None>

# (optional) number of seconds that an operation will wait to get a
# memcache client connection from the pool. (integer value)
#memcache_pool_conn_get_timeout = 10

# (optional) number of seconds memcached server is considered dead
# before it is tried again. (integer value)
#memcache_pool_dead_retry = 300

# (optional) max total number of open connections to every memcached
# server. (integer value)
#memcache_pool_maxsize = 10

# (optional) socket timeout in seconds for communicating with a
# memcache server. (integer value)
#memcache_pool_socket_timeout = 3

# (optional) number of seconds a connection to memcached is held
# unused in the pool before it is closed. (integer value)
#memcache_pool_unused_timeout = 60

# (optional, mandatory if memcache_security_strategy is defined) this
# string is used for key derivation. (string value)
#memcache_secret_key = <None>

# (optional) if defined, indicate whether token data should be
# authenticated or authenticated and encrypted. Acceptable values are
# MAC or ENCRYPT.  If MAC, token data is authenticated (with HMAC) in
# the cache. If ENCRYPT, token data is encrypted and authenticated in
# the cache. If the value is not one of these options or empty,
# auth_token will raise an exception on initialization. (string value)
#memcache_security_strategy = <None>

# (optional) use the advanced (eventlet safe) memcache client pool.
# The advanced pool will only work under python 2.x. (boolean value)
#memcache_use_advanced_pool = false

# Optionally specify a list of memcached server(s) to use for caching.
# If left undefined, tokens will instead be cached in-process. (list
# value)
# Deprecated group/name - [DEFAULT]/memcache_servers
#memcached_servers = <None>

# Determines the frequency at which the list of revoked tokens is
# retrieved from the Identity service (in seconds). A high number of
# revocation events combined with a low cache duration may
# significantly reduce performance. (integer value)
#revocation_cache_time = 10

# Directory used to cache files related to PKI tokens (string value)
#signing_dir = <None>

# In order to prevent excessive effort spent validating tokens, the
# middleware caches previously-seen tokens for a configurable duration
# (in seconds). Set to -1 to disable caching completely. (integer
# value)
#token_cache_time = 300


[matchmaker_redis]

#
# From oslo.messaging
#

# Host to locate redis. (string value)
#host = 127.0.0.1

# Password for Redis server (optional). (string value)
#password = <None>

# Use this port to connect to redis host. (integer value)
#port = 6379


[matchmaker_ring]

#
# From oslo.messaging
#

# Matchmaker ring file (JSON). (string value)
# Deprecated group/name - [DEFAULT]/matchmaker_ringfile
#ringfile = /etc/oslo/matchmaker_ring.json


[murano]

#
# From murano
#

# (SSL) Tells Murano to use the specified client certificate file when
# communicating with Murano API used by Murano engine. (string value)
#cacert = <None>
region_name_for_services = 'Spain2'

# (SSL) Tells Murano to use the specified client certificate file when
# communicating with Murano used by Murano engine. (string value)
#cert_file = <None>

# Murno endpoint type used by Murano engine. (string value)
#endpoint_type = publicURL

# This option explicitly allows Murano to perform "insecure" SSL
# connections and transfers used by Murano engine. (boolean value)
#insecure = false

# (SSL/SSH) Private key file name to communicate with Murano API used
# by Murano engine. (string value)
#key_file = <None>

# Optional murano url in format like http://0.0.0.0:8082 used by
# Murano engine (string value)
#url = <None>


[networking]

#
# From murano
#

# This option will create a router when one with "router_name" does
# not exist (boolean value)
#create_router = true

# Default DNS nameserver to be assigned to created Networks (string
# value)
#default_dns = 8.8.8.8

# Template IP address for generating environment subnet cidrs (string
# value)
#env_ip_template = 10.0.0.0

# ID or name of the external network for routers to connect to (string
# value)
external_network = public-ext-net-01

# Maximum number of environments that use a single router per tenant
# (integer value)
#max_environments = 20

# Maximum number of VMs per environment (integer value)
#max_hosts = 250

# Name of the router that going to be used in order to join all
# networks created by Murano (string value)
router_name = rt-external


[neutron]

#
# From murano
#

# (SSL) Tells Murano to use the specified client certificate file when
# communicating with Neutron. (string value)
#ca_cert = <None>

# Neutron endpoint type. (string value)
#endpoint_type = publicURL

# This option explicitly allows Murano to perform "insecure" SSL
# connections and transfers with Neutron API. (boolean value)
#insecure = false


[packages_opts]

#
# From murano
#

# Maximum number of packages to be returned in a single pagination
# request (integer value)
#api_limit_max = 100

# Default value for package pagination in API. (integer value)
#limit_param_default = 20

# Maximum application package size, Mb (integer value)
#package_size_limit = 5

# Location (directory) for Murano package cache. (string value)
#packages_cache = <None>


[rabbitmq]

#
# From murano
#

# SSL cert file (valid only if SSL enabled). (string value)
#ca_certs =

# The RabbitMQ broker address which used for communication with Murano
# guest agents. (string value)
#host = localhost
host =130.206.84.6
# RabbitMQ HA cluster host:port pairs. (list value)
#rabbit_hosts = $rabbit_host:$rabbit_port

# the RabbitMQ login method (string value)
#rabbit_login_method = AMQPLAIN

# Maximum number of RabbitMQ connection retries. Default is 0
# (infinite retry count). (integer value)
#rabbit_max_retries = 0

# The RabbitMQ password. (string value)
password = guest
# The RabbitMQ login. (string value)
#login = guest

# The RabbitMQ password. (string value)
#password = guest

# The RabbitMQ broker port. (integer value)
#port = 5672

# Boolean flag to enable SSL communication through the RabbitMQ broker
# between murano-engine and guest agents. (boolean value)
#ssl = false

# The RabbitMQ virtual host. (string value)
#virtual_host = /


[ssl]

#
# From murano
#

# CA certificate file to use to verify connecting clients. (string
# value)
#ca_file = <None>

# Certificate file to use when starting the server securely. (string
# value)
#cert_file = <None>

# Private key file to use when starting the server securely. (string
# value)
#key_file = <None>


[stats]

#
# From murano
#

# Statistics collection interval in minutes.Default value is 5
# minutes. (integer value)
#period = 5
